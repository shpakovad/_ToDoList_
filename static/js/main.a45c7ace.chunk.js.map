{"version":3,"sources":["TodoListHeader.js","TodoListTask.js","TodoListTasks.js","TodoListFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoListHeader","state","error","title","onAddTaskClick","newText","_this","setState","props","addTask","onTitleChanged","e","currentTarget","value","onKeyPress","key","render","classNameForInput","react_default","a","createElement","className","type","placeholder","onChange","onClick","React","Component","TodoListTask","onIsDoneChanged","changeStatus","task","id","checked","changeTitle","editMode","activateEditMode","deactivateEditMode","containerCssClass","isDone","onBlur","autoFocus","onIsDeleteTodo","deleteTask","TodoListTasks","tasksElements","tasks","map","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","App","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","forEach","t","nextTaskId","newTask","priority","newTasks","concat","Object","toConsumableArray","newFilterValue","changeTask","taskId","obj","objectSpread2","filter","item","target","src_TodoListHeader","src_TodoListTasks","src_TodoListFooter","this","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a45c7ace.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass TodoListHeader extends React.Component {\n    state = {\n        error: false,\n        title: \"\"\n    };\n\n    onAddTaskClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addTask(newText);\n        }\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    };\n\n    onKeyPress = (e) => {\n        if (e.key === \"Enter\") {\n            this.onAddTaskClick()\n        }\n    };\n\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"inputStyle\";\n\n        return (\n            <div className=\"todoList-header\">\n                <h3 className=\"todoList-header__title\">ToDo List</h3>\n                <div className=\"todoList-newTaskForm\">\n                    <input className={classNameForInput} type=\"text\" placeholder=\"New task's name\"\n                           onChange={this.onTitleChanged}\n                           onKeyPress={this.onKeyPress}\n                           value={this.state.title}\n                    />\n                    <button className='btn-headerStyle' onClick={this.onAddTaskClick}>Add</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoListHeader;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTask extends React.Component {\n\n    onIsDoneChanged = (e) => {\n        this.props.changeStatus(this.props.task.id, e.currentTarget.checked);\n    };\n\n    onTitleChanged = (e) => {\n        this.props.changeTitle(this.props.task.id, e.currentTarget.value);\n    };\n\n    state = {\n        editMode: false\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    };\n\n    deactivateEditMode= () => {\n        this.setState({editMode: false});\n    };\n\n\n    render = () => {\n\n        let containerCssClass = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\n\n        return (\n                <div className={containerCssClass}>\n                    <input className='checkbox' type=\"checkbox\" checked={this.props.task.isDone}\n                           onChange={this.onIsDoneChanged}/>\n                    { this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true} value={this.props.task.title} />\n                        : <span className='text-style' onClick={this.activateEditMode}> {this.props.task.title}</span>\n                    }\n                    <button className='btn-delete' onChange={this.props.onIsDeleteTodo}\n                        onClick={()=>{this.props.deleteTask(this.props.task.id)}}> X </button>\n                </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let tasksElements = this.props.tasks.map( task => <TodoListTask task={task} key={task.id}\n                                                                        changeStatus={this.props.changeStatus}\n                                                                        changeTitle={this.props.changeTitle}\n                                                                        deleteTask={this.props.deleteTask}\n                                                                        onIsDeleteTodo={this.props.onIsDeleteTodo}\n                                                                        />);\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../src/App.css';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: true\n    };\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\"); };\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\"); };\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\"); };\n    onShowFiltersClick = () => { this.setState({isHidden: true}) };\n    onHideFiltersClick = () => { this.setState({isHidden: false}) };\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"btn-footer\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"btn-footer\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"btn-footer\";\n\n        return (\n            <div className=\"todoList-footer\">\n                { !this.state.isHidden && <div>\n                     <button onClick={ this.onAllFilterClick } className={classForAll}>All</button>\n                     <button onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\n                     <button onClick={ this.onActiveFilterClick } className={classForActive}>Active</button>\n                  </div>\n                }\n                { !this.state.isHidden && <span className='visibility' onClick={ this.onShowFiltersClick }>Hide Buttons</span> }\n                { this.state.isHidden && <span className='visibility' onClick={ this.onHideFiltersClick }>Show Buttons</span> }\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListHeader from \"./TodoListHeader\";\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.restoreState();\n    }\n    saveState = () => {\n        // переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем нашу строку в localStorage под ключом \"our-state\"\n        localStorage.setItem(\"our-state\", stateAsString);\n    };\n    restoreState = () => {\n        // объявляем наш стейт стартовый\n        let state = {\n            tasks: [],\n            filterValue: \"All\"\n        };\n        // считываем сохранённую ранее строку из localStorage\n        let stateAsString = localStorage.getItem(\"our-state\");\n        // а вдруг ещё не было ни одного сохранения?? тогда будет null.\n        // если не null, тогда превращаем строку в объект\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n        }\n        // устанавливаем стейт (либо пустой, либо восстановленный) в стейт\n        this.setState(state, () => {\n            this.state.tasks.forEach(t => {\n                if (t.id >= this.nextTaskId) {\n                    this.nextTaskId = t.id + 1;\n                }\n            })\n        });\n    };\n    nextTaskId = 0;\n    state = {\n        tasks: [],\n        filterValue: \"All\"\n    };\n\n    addTask = (newText) => {\n        let newTask = {\n            id: this.nextTaskId,\n            title: newText,\n            isDone: false,\n            priority: \"low\"\n        };\n        // инкрементим (увеличим) id следующей таски, чтобы при следюущем добавлении, он был на 1 больше\n        this.nextTaskId++;\n        let newTasks = [...this.state.tasks, newTask];\n        this.setState( {\n            tasks: newTasks\n        }, () => { this.saveState(); });\n\n    };\n\n    changeFilter = (newFilterValue) => {\n        this.setState( {\n            filterValue: newFilterValue\n        }, () => { this.saveState(); });\n    };\n\n    changeTask = (taskId, obj) => {\n        let newTasks = this.state.tasks.map(t => {\n            if (t.id !== taskId) {\n                return t;\n            }\n            else {\n                return {...t, ...obj};\n            }\n        });\n\n        this.setState({\n            tasks: newTasks\n        }, () => { this.saveState(); });\n    };\n    changeStatus = (taskId, isDone) => {\n        this.changeTask(taskId, {isDone: isDone});\n    };\n    changeTitle = (taskId, title) => {\n        this.changeTask(taskId, {title: title});\n    };\n    deleteTask=(id) => {\n        let newTasks=this.state.tasks.filter((item) => {\n            return item.id !== id\n        });\n        this.setState({\n            tasks:newTasks\n        });\n    };\n    onIsDeleteTodo=(e) => {\n        this.setState({tasks:e.target.value})\n    };\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n                    <TodoListHeader addTask={this.addTask} />\n                    <TodoListTasks changeStatus={this.changeStatus }\n                                   changeTitle={this.changeTitle }\n                                   deleteTask={this.deleteTask}\n                                   onIsDeleteTodo={this.onIsDeleteTodo}\n                                   tasks={this.state.tasks.filter(t => {\n                        if (this.state.filterValue === \"All\") {\n                            return true;\n                        }\n                        if (this.state.filterValue === \"Active\") {\n                            return t.isDone === false;\n                        }\n                        if (this.state.filterValue === \"Completed\") {\n                            return t.isDone === true;\n                        }\n                    })}/>\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}